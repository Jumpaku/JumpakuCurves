buildscript {
    ext.kotlin_version = "1.3.31"
    ext.jvm_version = "1.8"
    ext.jumpaku_commons_version = "2.0.0-alpha-3-SNAPSHOT"
    ext.junit4_version = "4.12"
    ext.junit5_version = "5.1.0"
    ext.jmh_plugin_version = "0.5.0"
    ext.hamcrest_version = "2.1"
    ext.commons_math3_version = "3.6.1"
    ext.kotson_version = "2.5.0"
    ext.vavr_version = "0.9.1"
}

plugins {
    id("org.jetbrains.kotlin.jvm").version("$kotlin_version")
    id("maven-publish")
    id("java")
}

// Common configuration
allprojects {

    group = "jumpaku"
    version = "3.0.0-alpha-1-SNAPSHOT"

    apply(plugin: "kotlin")
    apply(plugin: "maven-publish")

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url = "https://nexus.jumpaku.net/repository/maven-public/"
        }
    }

    tasks.named("compileKotlin") {
        kotlinOptions.jvmTarget = jvm_version
    }
    tasks.named("compileTestKotlin") {
        kotlinOptions.jvmTarget = jvm_version
    }

    dependencies {
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")

        api("jumpaku:jumpaku-commons-control:$jumpaku_commons_version")
        api("jumpaku:jumpaku-commons-math:$jumpaku_commons_version")
        api("jumpaku:jumpaku-commons-json:$jumpaku_commons_version")
        api("com.github.salomonbrys.kotson:kotson:$kotson_version")
        api("org.apache.commons:commons-math3:$commons_math3_version")
        testImplementation("jumpaku:jumpaku-commons-control-test:$jumpaku_commons_version")
        implementation("io.vavr:vavr:$vavr_version")
        if (name.endsWith("-test")) {
            implementation("org.hamcrest:hamcrest:$hamcrest_version")
            implementation("junit:junit:$junit4_version")
            api("jumpaku:jumpaku-commons-matcher:$jumpaku_commons_version")
            api("jumpaku:jumpaku-commons-math-test:$jumpaku_commons_version")
        }
    }

    // Publishing
    /**
     * To run publish,  ./gradlew publish -Pargs="`user id of nexus.jumpaku.net` `password`"
     */
    publishing {
        def (repositoryUsername, repositoryPassword) = (project?.findProperty("args") as String)?.split(/\s+/) ?: []
        repositories {
            maven {
                name = "snapshotRepo"
                url = uri("https://nexus.jumpaku.net/repository/maven-snapshots")
                credentials {
                    username = repositoryUsername ?: "UNKOWN"
                    password = repositoryPassword ?: "UNKOWN"
                }
            }
            if (!version.endsWith("SNAPSHOT")) {
                maven {
                    name = "releaseRepo"
                    url = uri("https://nexus.jumpaku.net/repository/maven-releases")
                    credentials {
                        username = repositoryUsername ?: "UNKOWN"
                        password = repositoryPassword ?: "UNKOWN"
                    }
                }
            }
        }

        publications {
            create("release", MavenPublication) {
                from(components["kotlin"])
            }
        }
    }
}

// Configurations for sub-projects
project(":jumpaku-curves-core") {
}

project(":jumpaku-curves-core-test") {
    dependencies {
        implementation(project(":jumpaku-curves-core"))
    }
}

project(":jumpaku-curves-fsc") {
    dependencies {
        api(project(":jumpaku-curves-core"))
    }
}

project(":jumpaku-curves-fsc-test") {
    dependencies {
        implementation(project(":jumpaku-curves-fsc"))
        api(project(":jumpaku-curves-core-test"))
    }
}

project(":jumpaku-curves-fsc-benchmark") {
    dependencies {
        implementation(project(":jumpaku-curves-fsc"))
        testImplementation("org.junit.jupiter:junit-jupiter:5.6.2")
    }
    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
    /*
    sourceSets {
        jmh {
            kotlin.srcDirs = ['src/jmh/kotlin']
            java.srcDirs = ['src/jmh/java']
            resources.srcDirs = ['src/jmh/resources']
            compileClasspath += sourceSets.main.runtimeClasspath
        }
    }
    jmh {
        duplicateClassesStrategy = 'warn'
    }*/
}

project(":jumpaku-curves-graphics") {
    dependencies {
        api(project(":jumpaku-curves-core"))
        api(project(":jumpaku-curves-fsc"))
    }
}

project(":jumpaku-curves-demo") {
    dependencies {
        implementation(project(":jumpaku-curves-core"))
        implementation(project(":jumpaku-curves-fsc"))
        implementation(project(":jumpaku-curves-graphics"))
    }
}
